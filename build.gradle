/*
 * Copyright 2018,2025 IBM Corp. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */


/*
 * This file shows how to build and publish various artifacts for linking IBM MQ with Spring.
 */

/*
 * The "BOOTVERSION" environment variable can be set to "boot2", "boot3" or "boot4" and that is used
 * as the prefix for various control files and processing steps. We only build a single version
 * from this file; to build both boot2 and boot3, you have to run gradle twice.
 * The default is "boot3" if the env var is not set.
 */
ext.bootVersionProperty = 'BOOTVERSION'
ext.bootVer             = (System.getenv(bootVersionProperty)== null?'boot3':System.getenv(bootVersionProperty))
ext.propsFile          = new File(rootDir, bootVer + '.properties')

// Now we know the Boot Version to build for, load the specific properties
apply from: propsFile

subprojects {
  apply plugin: 'java'
  apply plugin: 'java-library'
  apply plugin: 'maven-publish'
  apply plugin: 'signing'

  // This is the MQ client version
  ext.mqVersion = '9.4.2.0'
  ext.mqGroup = 'com.ibm.mq'

  // This is the testcontainers base jar version - these should match the current org.testcontainers level
  // It's only built once, so we don't need to put the MQ-specific module in one of the version properties.
  // The MQ version ought to match the base version, but it's not an absolute requirement so we split the
  // properties.
  ext.tcVer   = '1.21.0'
  ext.mqTCVer = '0.0.9'

  // The groupid for the compiled jars when uploaded
  group = mqGroup
  version = mqStarterVersion

  // Spring no longer release early milestone/snapshot package to their own repository so we 
  // don't need to have them in here
  repositories {
    mavenLocal()
    mavenCentral()
  }
  
  dependencies {
    // Now live in the underlying project's build.gradle files
  }  

  // Include variable debug info in the compiled classes
  compileJava.options.debugOptions.debugLevel = "source,lines,vars"
  // Fail on javac warnings
  if (bootVer != "boot2") {
    compileJava.options.compilerArgs << "-Werror"
  }
  task mqPrereq(type:Exec)  {
     commandLine ("../prereqCheck.sh", mqGroup, mqJar, mqVersion)
  }

  // Always UTF-8
  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }
  
  compileJava.dependsOn(processResources)
  compileJava {
    sourceCompatibility=javaSourceCompatibility
    targetCompatibility=javaSourceCompatibility
  }

  task sourcesJar(type: Jar, dependsOn: ['mqPrereq',classes]) {
    archiveClassifier = 'sources'
    sourceSets.all {
      into(name + "/java", { from allJava })
      into(name + "/resources", { from resources })
    }
  }

  javadoc {
   failOnError = false
    options.encoding 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
    options.setMemberLevel JavadocMemberLevel.PROTECTED
    /*
    // Add a logging listener to check for javadoc warnings and fail the build if there are any
    boolean hasJavaDocWarnings = false;
    doFirst {
      getLogging().addStandardErrorListener(new StandardOutputListener() {
        void onOutput(CharSequence output) {
          if (output =~ "warning:") {
            hasJavaDocWarnings = true
          }
        }
      })
    }
    doLast {
      if (hasJavaDocWarnings) {
        throw new GradleException("Build failed due to javadoc warnings.");
      }
    }
    */
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
  }

  artifacts {
    archives sourcesJar, javadocJar
  }

  // Load signing parameters from external properties
  // This will probably be a "gradle.properties" file in this directory
  ['signing.keyId', 'signing.password', 'signing.secretKeyRingFile']
        .each { propName ->
    //set a property with the given name if the system property is set
    //if the system property is not set then set the property to null if it isn't a signing one
    if (System.properties.(propName.toString()) != null || !propName.startsWith("signing")) {
      ext.(propName.toString()) = System.properties.(propName.toString())
    }
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java
        artifact(sourcesJar) {
            classifier = 'sources'
        }
        artifact(javadocJar) {
            classifier = 'javadoc'
        }

        pom {
          name = rootProject.name
          if (project.name.contains("spring")) {
            name = rootProject.name
            description = 'Spring configuration for the official IBM MQ library for Java'
            inceptionYear = '2018'
          } else {
            name = project.name
            description = 'Testcontainers configuration for IBM MQ'  
            inceptionYear = '2025'
          }
              
          packaging = 'jar'
          url = 'https://github.com/ibm-messaging/mq-jms-spring'
          licenses {
            license {
              name = 'The Apache Software License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution = 'repo'
            }
          }
              
          scm {
            connection = 'scm:git:git://github.com/ibm-messaging/mq-jms-spring.git'
            developerConnection = 'scm:git:git@github.com/ibm-messaging/mq-jms-spring.git'
            url = 'https://github.com/ibm-messaging/mq-jms-spring.git'
          }
          properties = [
            'project.build.sourceEncoding': 'UTF-8'
          ]
              
          developers {
            developer {
              name = 'IBM MQ'
              url = 'https://ibm.com/software/products/en/ibm-mq'
              organization = 'IBM'
              organizationUrl = 'http://www.ibm.com'
            }
          }
        }
      }
    }
    
    repositories {
      maven {
        def snapshotUrl = "https://oss.sonatype.org/content/repositories/snapshots"
        def releasesUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
        url = version.endsWith('SNAPSHOT') ? snapshotUrl : releasesUrl
        credentials {
          username ossrhUsername
          password ossrhPassword
        }
      }
    }
  }

  signing {
    if (System.getenv('NOSIGN')== null) {
       println("Will sign the artifacts")
       sign publishing.publications.mavenJava
    } else {
        // println("Will not sign the artifacts")
    }
  }
}
